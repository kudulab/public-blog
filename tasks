#!/bin/bash

set -e
if [[ ! -f ./releaser ]];then
  wget --quiet http://http.archive.ai-traders.com/releaser/1.0.3/releaser || { echo "cannot download releaser, but maybe not needed"; }
fi
source ./releaser
if [[ ! -f ./secret-ops ]]; then
  wget --quiet http://os2.ai-traders.com:6780/swift/v1/secret-ops/0.4.0/secret-ops || { echo "cannot download secret-ops"; }
fi
if [[ -f ./secret-ops ]]; then source ./secret-ops; fi
releaser_init

KUDU_SERVICE="www"

function read_from_vault_or_die {
  local vault_key=$1
  local field=$2
  echo "Trying to read from vault: ${vault_key}." >&2
  if [ -z "$VAULT_TOKEN" ]; then
    echo "Failed reading from vault: VAULT_TOKEN is not set." >&2
    exit 1
  fi
  if [ -z "$VAULT_ADDR" ]; then
    echo "Failed reading from vault: VAULT_ADDR is not set." >&2
    exit 1
  fi
  vault kv get --field=$field secret/gocd/${vault_key}
  if [ $? != 0 ]; then
    echo "Failed reading from vault: ${vault_key}" >&2
    exit 1
  else
    echo "Successfully read from vault: ${vault_key}" >&2
  fi
}

function tf_apply {
  operation=$1

  cd terraform/
  terraform init -backend-config path=terraform/kudu-${KUDU_SERVICE}
  terraform get
  if [[ "${operation}" == "apply" ]]; then
    terraform plan -out="kudu_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -out="kudu_deployment.tfplan" -destroy
  fi
  terraform apply kudu_deployment.tfplan
}

command="$1"
case "${command}" in
  _set_dns)
      tf_apply "apply"
      ;;
  set_dns)
      # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from vault
      export AWS_ACCESS_KEY_ID=$(read_from_vault_or_die "aws" "access_key_id")
      export AWS_SECRET_ACCESS_KEY=$(read_from_vault_or_die "aws" "secret_access_key")
      dojo -c terraform/Dojofile "./tasks _set_dns"
      ;;
  generate_vault_token)
      set -e
      vault_token=$(vault token create -orphan -renewable=true -period=78h -policy=gocd -field token -metadata gocd_renew=true)
      secured_token_gocd=$(encrypt_with_gocd2 "${vault_token}")
      echo "Generated token: ${vault_token} and encrypted by GoCD server"
      echo "Replacing pipeline config with VAULT_TOKEN: ${secured_token_gocd}"
      find . -name "*.gocd.yaml" -exec sed -i -E "s#VAULT_TOKEN\:.*#VAULT_TOKEN: ${secured_token_gocd}#g" {} \;
      ;;
  set_version)
      if [[ -n "$2" ]]; then
        next_version="$2"
        set_version_in_changelog "${changelog_file}" "${next_version}"
      else
        old_version=$(get_last_version_from_changelog "${changelog_file}")
        next_version=$(bump_patch_version "${old_version}")
        set_version_in_changelog "${changelog_file}" "${next_version}"
      fi
      exit $?
      ;;
  generate)
      if [[ -z "${KUDU_ENVIRONMENT}" ]]; then
        echo "KUDU_ENVIRONMENT is not set"
        exit 1
      fi
      if [[ "${KUDU_ENVIRONMENT}" == "development" ]]; then
        base_url="//workstation:8088/"
      elif [[ "${KUDU_ENVIRONMENT}" == "testing" ]]; then
        base_url="//localhost:8088/"
      elif [[ "${KUDU_ENVIRONMENT}" == "production" ]]; then
        base_url="https://kudulab.io/"
      else
        echo "Unsupported KUDU_ENVIRONMENT=${KUDU_ENVIRONMENT}, exit 1"
        exit 1
      fi
      cd src
      rm -rf public/*
      ide "hugo --baseUrl=${base_url}"
      ;;
  demo_host)
      docker run -d -p 8088:80 --name www-host\
        -v "${PWD}/src/public":/usr/local/apache2/htdocs/\
        httpd:2.4.29-alpine
      exit $?
      ;;
  test)
      time bats "$(pwd)/test/integration/bats"
      exit $?
      ;;
  cleanup)
      docker stop www-host; docker rm www-host
      exit $?
      ;;
  release)
      version=$(get_last_version_from_changelog "${changelog_file}")
      if git tag | grep "${version}"; then
        log_error "The last version from changelog was already git tagged: ${version}"
        exit 1
      fi
      git tag ${version}
      git push --tags
      exit $?
      ;;
  publish)
      git_ref=$(git log -1 --pretty='format:%H')
      git clone git@github.com:kudulab/kudulab.github.io.git kudulab.github.io
      cd kudulab.github.io
      # remove everything but for .git directory
      for a_file in *; do
        rm -rf "${a_file}"
      done
      cp -r ../src/public/* .
      git add .
      git commit -m "generated from git ref: ${git_ref}" || true
      git push
      exit $?
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
